{
  "0": "<div class='slide title-slide'>\n<h1 class='main-title'>Stop Fighting Wraparound</h1>\n<h2 class='subtitle'>Embed Your Rings!</h2>\n<div class='visual-element'>\n<svg width='400' height='200' viewBox='0 0 400 200'>\n<!-- Circle representing wraparound -->\n<circle\ncx='100'\ncy='100'\nr='80'\nfill='none'\nstroke='#4CAF50'\nstroke-width='3'\n/>\n<!-- Points near wraparound -->\n<circle cx='170' cy='100' r='8' fill='#FF5722' />\n<circle cx='30' cy='100' r='8' fill='#2196F3' />\n<!-- Arrow showing 'wrong' linear distance -->\n<path\nd='M 170 100 L 30 100'\nstroke='#FF5722'\nstroke-width='2'\nstroke-dasharray='5,5'\nopacity='0.5'\n/>\n<text x='100' y='90' text-anchor='middle' fill='#FF5722' font-size='14'>\n140° apart?\n</text>\n<!-- Arrow showing correct arc distance -->\n<path\nd='M 170 100 A 80 80 0 0 0 30 100'\nfill='none'\nstroke='#4CAF50'\nstroke-width='3'\n/>\n<text\nx='100'\ny='130'\ntext-anchor='middle'\nfill='#4CAF50'\nfont-size='14'\nfill='#FFC107'\n>\n20° apart!\n</text>\n<!-- Embedding arrow -->\n<path\nd='M 220 100 L 280 100'\nstroke='#666'\nstroke-width='2'\nmarker-end='url(#arrowhead)'\n/>\n<text\nx='250'\ny='90'\ntext-anchor='middle'\nfill='#666'\nfont-size='12'\nfill='#FFC107'\n>\nembed\n</text>\n<!-- 2D representation -->\n<g transform='translate(320, 100)'>\n<line x1='-50' y1='0' x2='50' y2='0' stroke='#999' stroke-width='1' />\n<line x1='0' y1='-50' x2='0' y2='50' stroke='#999' stroke-width='1' />\n<circle cx='40' cy='0' r='8' fill='#FF5722' />\n<circle cx='-40' cy='0' r='8' fill='#2196F3' />\n<text\nx='0'\ny='-60'\ntext-anchor='middle'\nfill='#666'\nfont-size='12'\nfill='#FFC107'\n>\nℝ²\n</text>\n</g>\n<!-- Arrow marker -->\n<defs>\n<marker\nid='arrowhead'\nmarkerWidth='10'\nmarkerHeight='7'\nrefX='10'\nrefY='3.5'\norient='auto'\n>\n<polygon points='0 0, 10 3.5, 0 7' fill='#666' />\n</marker>\n</defs>\n</svg>\n</div>\n<div class='presenter-info'>\n<p>A practical guide to handling circular quantities in code</p>\n<p class='author'>ByteBard</p>\n<p class='date'>Tech Talk</p>\n</div>\n</div>",
  "1": "<div class='slide'>\n<h1>The Bug We've All Written</h1>\n<div class='highlight-box'>\n<h3>❌ The Naive Approach</h3>\n<pre><code class='language-python'>def average_angle(angle1, angle2):\n    return (angle1 + angle2) / 2  # Seems reasonable...\n# Example: Average heading between two compass readings\nheading1 = 350  # degrees\nheading2 = 10   # degrees\naverage = average_angle(heading1, heading2)\nprint(f'Average: {average}°')  # 180° - COMPLETELY WRONG!</code></pre>\n</div>\n<div class='visual-demo'>\n<svg width='600' height='600' viewBox='0 0 300 300'>\n<!-- Compass circle -->\n<circle cx='150' cy='150' r='120' fill='none' stroke='#333' stroke-width='2'/>\n<!-- Compass labels -->\n<text x='150' y='20' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>N (0°)</text>\n<text x='280' y='155' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>E (90°)</text>\n<text x='150' y='290' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>S (180°)</text>\n<text x='20' y='155' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>W (270°)</text>\n<!-- Heading 1: 350° -->\n<line x1='150' y1='150' x2='140' y2='30' stroke='#2196F3' stroke-width='4'/>\n<circle cx='140' cy='30' r='8' fill='#2196F3'/>\n<text x='110' y='20' font-size='14' fill='#FFC107'>350°</text>\n<!-- Heading 2: 10° -->\n<line x1='150' y1='150' x2='160' y2='30' stroke='#4CAF50' stroke-width='4'/>\n<circle cx='160' cy='30' r='8' fill='#4CAF50'/>\n<text x='190' y='20' font-size='14' fill='#FFC107'>10°</text>\n<!-- Wrong average: 180° -->\n<line x1='150' y1='150' x2='150' y2='270' stroke='#FF5722' stroke-width='4' stroke-dasharray='5,5'/>\n<circle cx='150' cy='270' r='8' fill='#FF5722'/>\n<text x='150' y='260' text-anchor='middle' font-size='16' fill='#FF5722' font-weight='bold'>\nWrong: 180°\n</text>\n<!-- Correct average indicator -->\n<line x1='150' y1='150' x2='150' y2='30' stroke='#FFC107' stroke-width='3' opacity='0.7'/>\n<text x='220' y='60' font-size='14' fill='#ffffff' font-weight='bold'>Should be ~0°!</text>\n</svg>\n</div>\n<div class='warning-box'>\n<h3>What Went Wrong?</h3>\n<ul>\n<li>350° and 10° are <strong>20° apart</strong> on the circle</li>\n<li>But linear math sees them as <strong>340° apart</strong></li>\n<li>The average points in the <strong>opposite direction</strong>!</li>\n</ul>\n</div>\n</div>",
  "2": "<div class='slide'>\n<h1>The Midnight Bug</h1>\n<div class='info-box'>\n<h3>📅 Real Scenario: Event Duration Tracking</h3>\n<p>Meeting started at <strong>23:45</strong> (11:45 PM)</p>\n<p>Meeting ended at <strong>00:15</strong> (12:15 AM)</p>\n</div>\n<div class='code-comparison'>\n<div class='highlight-box'>\n<h4>❌ What Everyone Tries First</h4>\n<pre><code>start_time = 23.75  # 23:45 in decimal hours\nend_time = 0.25     # 00:15 in decimal hours\nduration = end_time - start_time\nprint(f'Duration: {duration} hours')\n# Output: -23.5 hours 🤦</code></pre>\n</div>\n<div class='warning-box'>\n<h4>🤔 The Hacky 'Fix'</h4>\n<pre><code>if end_time < start_time:\n    # Must have crossed midnight\n    duration = (24 - start_time) + end_time\nelse:\n    duration = end_time - start_time\n    \n# More special cases...\nif crossed_dst:  # Daylight savings\n    duration += 1  # or -1? 😭</code></pre>\n</div>\n</div>\n<div class='clock-visual'>\n<svg width='1200' height='500' viewBox='0 0 800 300'>\n<!-- Linear representation -->\n<g transform='translate(30, 80)'>\n<text x='150' y='-20' text-anchor='middle' font-size='14' font-weight='bold' fill='#FFC107'>Linear View:</text>\n<line x1='0' y1='20' x2='300' y2='20' stroke='#333' stroke-width='2'/>\n<!-- Time markers -->\n<line x1='0' y1='15' x2='0' y2='25' stroke='#333' stroke-width='2'/>\n<text x='0' y='40' text-anchor='middle' font-size='12' fill='#FFC107'>0:00</text>\n<line x1='150' y1='15' x2='150' y2='25' stroke='#333' stroke-width='2'/>\n<text x='150' y='40' text-anchor='middle' font-size='12' fill='#FFC107'>12:00</text>\n<line x1='300' y1='15' x2='300' y2='25' stroke='#333' stroke-width='2'/>\n<text x='300' y='40' text-anchor='middle' font-size='12' fill='#FFC107'>24:00</text>\n<!-- Start time: 23:45 (23.75/24 * 300 = 296.25) -->\n<circle cx='296' cy='20' r='8' fill='#2196F3'/>\n<text x='296' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>23:45</text>\n<!-- End time: 00:15 (0.25/24 * 300 = 3.125) -->\n<circle cx='3' cy='20' r='8' fill='#4CAF50'/>\n<text x='3' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>00:15</text>\n<!-- Wrong distance -->\n<path d='M 296 20 L 3 20' stroke='#FF5722' stroke-width='2' stroke-dasharray='5,5' opacity='0.5'/>\n<text x='150' y='80' text-anchor='middle' fill='#FF5722' font-size='14'>Linear: -23.5 hours!</text>\n</g>\n<!-- Circular representation -->\n<g transform='translate(550, 150)'>\n<text x='0' y='-90' text-anchor='middle' font-size='14' font-weight='bold' fill='#FFC107'>Circular View:</text>\n<circle cx='0' cy='0' r='70' fill='none' stroke='#333' stroke-width='2'/>\n<!-- Clock numbers -->\n<text x='0' y='-55' text-anchor='middle' font-size='12' fill='#FFC107'>12</text>\n<text x='55' y='5' text-anchor='middle' font-size='12' fill='#FFC107'>3</text>\n<text x='0' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>6</text>\n<text x='-55' y='5' text-anchor='middle' font-size='12' fill='#FFC107'>9</text>\n<!-- Start: 23:45 -->\n<line x1='0' y1='0' x2='-10' y2='-68' stroke='#2196F3' stroke-width='3'/>\n<circle cx='-10' cy='-68' r='8' fill='#2196F3'/>\n<!-- End: 00:15 -->\n<line x1='0' y1='0' x2='10' y2='-68' stroke='#4CAF50' stroke-width='3'/>\n<circle cx='10' cy='-68' r='8' fill='#4CAF50'/>\n<!-- Correct arc -->\n<path d='M -10 -68 A 70 70 0 0 1 10 -68' fill='none' stroke='#4CAF50' stroke-width='3'/>\n<text x='0' y='90' text-anchor='middle' fill='#4CAF50' font-size='14' font-weight='bold'>\nCorrect: 30 minutes!\n</text>\n</g>\n</svg>\n</div>\n<div class='success-box'>\n<h3>💡 The Key Insight</h3>\n<p>Time-of-day is a <strong>24-hour ring</strong>, not a line!</p>\n<p>Linear arithmetic breaks at the wraparound point.</p>\n</div>\n</div>",
  "3": "<div class='slide'>\n<h1>The Missing Math Class: Circular Operations</h1>\n<div class='warning-box'>\n<h3>🤯 What They Never Taught You</h3>\n<p>Circular quantities are everywhere, but traditional math classes skip the operations entirely! Here's what you can actually <strong>do</strong> once you embed them as vectors:</p>\n</div>\n<div class='two-column-equal'>\n<div class='card'>\n<h3>📊 Basic Operations</h3>\n<div class='operation-list'>\n<div class='op-item'>\n<strong>Addition:</strong> <code>v₁ + v₂</code><br>\n<small>Compose two rotations</small>\n</div>\n<div class='op-item'>\n<strong>Subtraction:</strong> <code>v₁ - v₂</code><br>\n<small>Find angular difference</small>\n</div>\n<div class='op-item'>\n<strong>Average:</strong> <code>mean(vectors)</code><br>\n<small>Circular mean (always works!)</small>\n</div>\n<div class='op-item'>\n<strong>Interpolation:</strong> <code>slerp(v₁, v₂, t)</code><br>\n<small>Smooth rotation between angles</small>\n</div>\n</div>\n</div>\n<div class='card'>\n<h3>🧮 Advanced Operations</h3>\n<div class='operation-list'>\n<div class='op-item'>\n<strong>Distance:</strong> <code>shortest_path(θ₁, θ₂)</code><br>\n<small>Minimal angular separation</small>\n</div>\n<div class='op-item'>\n<strong>Scaling:</strong> <code>scalar × vector</code><br>\n<small>Scale magnitude, preserve direction</small>\n</div>\n<div class='op-item'>\n<strong>Derivatives:</strong> <code>d/dt [cos(ωt), sin(ωt)]</code><br>\n<small>Angular velocity vectors</small>\n</div>\n<div class='op-item'>\n<strong>Integration:</strong> <code>∫ ω(t) dt</code><br>\n<small>Accumulate rotations over time</small>\n</div>\n</div>\n</div>\n</div>\n<div class='success-box'>\n<h3>📈 Circular Statistics (The Really Cool Stuff)</h3>\n<div class='code-example'>\n<pre><code class='language-python'># Operations that actually work on circular data!\nangles = [350°, 10°, 5°, 355°]  # Wind directions\nvectors = [to_vector(θ) for θ in angles]\n# Circular mean (not 180°!)\nmean_vector = np.mean(vectors, axis=0) \nmean_angle = from_vector(mean_vector)  # ≈ 0°\n# Circular standard deviation  \ndispersion = 1 - |mean_vector|  # How 'spread out' are they?\n# Circular correlation\ncorrelation = correlate_circular(wind_dir, wave_dir)\n# Circular regression (yes, this exists!)\nslope, intercept = circular_regression(time, wave_directions)</code></pre>\n</div>\n</div>\n<div class='info-box'>\n<h3>🎯 Why This Matters</h3>\n<div class='three-column'>\n<div>\n<h4>🌊 Oceanography</h4>\n<p>Wave directions, current flows</p>\n</div>\n<div>\n<h4>🧭 Navigation</h4>\n<p>GPS, compass bearings, flight paths</p>\n</div>\n<div>\n<h4>🧬 Biology</h4>\n<p>Circadian rhythms, animal migration</p>\n</div>\n<div>\n<h4>🎵 Signal Processing</h4>\n<p>Phase analysis, Fourier transforms</p>\n</div>\n<div>\n<h4>🤖 Robotics</h4>\n<p>Joint angles, orientation control</p>\n</div>\n<div>\n<h4>📊 Data Science</h4>\n<p>Seasonal trends, cyclic patterns</p>\n</div>\n</div>\n</div>\n<div class='highlight-box'>\n<h3>💡 The Big Insight</h3>\n<p><strong>Every operation you know from linear algebra works on circular quantities—you just need to embed them first!</strong> This is why embedding is such a powerful mathematical technique.</p>\n<div class='formula-showcase'>\n<code>Circular Quantity → Vector → Linear Operation → Vector → Circular Result</code>\n</div>\n</div>\n</div>",
  "4": "<div class='slide'>\n<h1>Circular Statistics: The Hidden Superpower</h1>\n<div class='warning-box'>\n<h3>🤯 What Statistics Class Never Taught You</h3>\n<p>Standard statistics breaks horribly on circular data. But vector embedding makes circular statistics <strong>trivially easy</strong>—and incredibly powerful!</p>\n</div>\n<div class='two-column-equal'>\n<div class='card'>\n<h3>📊 The Problem with Regular Stats</h3>\n<div class='code-example'>\n<pre><code class='language-python'># Wind directions (degrees)\nangles = [350, 10, 5, 355]\n# Regular mean = DISASTER\nmean = sum(angles) / len(angles)  # = 180°\n# 180° is the OPPOSITE direction! 🤦‍♂️\n# Regular standard deviation = MEANINGLESS\nstd = numpy.std(angles)  # = 187°\n# Standard deviation larger than the range!</code></pre>\n</div>\n</div>\n<div class='card'>\n<h3>✨ Vector Statistics = Magic</h3>\n<div class='code-example'>\n<pre><code class='language-python'># Convert to vectors\nvectors = [angle_to_vector(θ) for θ in angles]\n# Circular mean = WORKS!\nmean_vector = np.mean(vectors, axis=0)\nmean_angle = vector_to_angle(mean_vector)  # ≈ 0°\n# Correct direction! 🎯\n# Circular standard deviation\nR = |mean_vector|  # Mean vector length\ncircular_std = sqrt(-2 * log(R))  # ≈ 22°\n# Sensible measure of spread!</code></pre>\n</div>\n</div>\n</div>\n<div class='info-box'>\n<h3>🧠 The Key Insight: Mean Vector Length</h3>\n<div class='two-column'>\n<div class='visual-element'>\n<svg width='300' height='200' viewBox='0 0 300 200'>\n<!-- Tight cluster -->\n<g transform='translate(75, 100)'>\n<circle r='50' fill='none' stroke='#666' stroke-width='1' opacity='0.3'/>\n<!-- Data points clustered tightly -->\n<circle cx='45' cy='5' r='4' fill='#4CAF50'/>\n<circle cx='47' cy='-3' r='4' fill='#4CAF50'/>\n<circle cx='43' cy='3' r='4' fill='#4CAF50'/>\n<circle cx='46' cy='0' r='4' fill='#4CAF50'/>\n<!-- Strong mean vector -->\n<path d='M 0 0 L 40 0' stroke='#FF5722' stroke-width='4' marker-end='url(#arrow)'/>\n<text x='0' y='-65' text-anchor='middle' fill='#4CAF50' font-size='12'>Tight Cluster</text>\n<text x='0' y='75' text-anchor='middle' fill='#FF5722' font-size='11'>|R| ≈ 0.95</text>\n<text x='0' y='87' text-anchor='middle' fill='#666' font-size='10'>Low variance</text>\n</g>\n<!-- Spread out data -->\n<g transform='translate(225, 100)'>\n<circle r='50' fill='none' stroke='#666' stroke-width='1' opacity='0.3'/>\n<!-- Data points spread out -->\n<circle cx='45' cy='5' r='4' fill='#2196F3'/>\n<circle cx='-30' cy='35' r='4' fill='#2196F3'/>\n<circle cx='-15' cy='-45' r='4' fill='#2196F3'/>\n<circle cx='20' cy='-40' r='4' fill='#2196F3'/>\n<!-- Weak mean vector -->\n<path d='M 0 0 L 8 -5' stroke='#FF5722' stroke-width='4' marker-end='url(#arrow)'/>\n<text x='0' y='-65' text-anchor='middle' fill='#2196F3' font-size='12'>Spread Out</text>\n<text x='0' y='75' text-anchor='middle' fill='#FF5722' font-size='11'>|R| ≈ 0.1</text>\n<text x='0' y='87' text-anchor='middle' fill='#666' font-size='10'>High variance</text>\n</g>\n<defs>\n<marker id='arrow' markerWidth='10' markerHeight='7' refX='10' refY='3.5' orient='auto'>\n<polygon points='0 0, 10 3.5, 0 7' fill='#FF5722'/>\n</marker>\n</defs>\n</svg>\n</div>\n<div>\n<h4>💡 The Beautiful Truth</h4>\n<div class='formula-showcase'>\n<p><strong>Tight cluster:</strong> Mean vector is long (|R| → 1)</p>\n<p><strong>Spread out:</strong> Mean vector is short (|R| → 0)</p>\n<p><strong>Uniform circle:</strong> Mean vector ≈ 0</p>\n</div>\n<p>The length of the mean vector automatically captures how 'concentrated' your circular data is!</p>\n</div>\n</div>\n</div>\n<div class='success-box'>\n<h3>🔬 Advanced Circular Stats That Actually Work</h3>\n<div class='code-example'>\n<pre><code class='language-python'># Circular correlation between two angular variables\ndef circular_correlation(angles1, angles2):\n    v1 = [angle_to_vector(θ) for θ in angles1]\n    v2 = [angle_to_vector(θ) for θ in angles2]\n    # Standard correlation on the vector components\n    return pearsonr(v1, v2)\n# Circular regression (yes, this exists!)\ndef circular_regression(x, circular_y):\n    vectors_y = [angle_to_vector(θ) for θ in circular_y]\n    # Regress each component separately\n    cos_model = LinearRegression().fit(x, [v[0] for v in vectors_y])\n    sin_model = LinearRegression().fit(x, [v[1] for v in vectors_y])\n    return cos_model, sin_model\n# Watson-Williams test (circular ANOVA)\n# Test if multiple groups have the same mean direction\ndef watson_williams_test(group1_angles, group2_angles):\n    # Convert to vectors, compute mean directions, test significance\n    # (This is the circular equivalent of a t-test!)</code></pre>\n</div>\n</div>\n<div class='highlight-box'>\n<h3>🌟 Real-World Applications</h3>\n<div class='three-column'>\n<div>\n<h4>🧬 Biology</h4>\n<p><strong>Animal migration:</strong> Test if birds change direction by season</p>\n<p><strong>Circadian rhythms:</strong> Correlate activity with time of day</p>\n</div>\n<div>\n<h4>🌊 Earth Sciences</h4>\n<p><strong>Wind patterns:</strong> Seasonal wind direction changes</p>\n<p><strong>Ocean currents:</strong> Correlation with tidal cycles</p>\n</div>\n<div>\n<h4>🎵 Signal Processing</h4>\n<p><strong>Phase analysis:</strong> Correlation between signal phases</p>\n<p><strong>Circular convolution:</strong> Periodic signal filtering</p>\n</div>\n</div>\n</div>\n</div>",
  "5": "<div class='slide'>\n<h1>Discrete Calculus on Circles: Data-Driven Operations</h1>\n<div class='info-box'>\n<h3>📊 Real-World Data = Discrete Samples</h3>\n<p>In practice, we don't have continuous functions—we have <strong>time series data</strong> of circular quantities. How do we compute derivatives and integrals when our data wraps around?</p>\n</div>\n<div class='two-column-equal'>\n<div class='card'>\n<h3>📈 Discrete Derivatives (Angular Velocity)</h3>\n<div class='code-example'>\n<pre><code class='language-python'># WRONG: Naive difference breaks at wraparound\nangles = [358°, 359°, 1°, 2°]  # Smooth rotation\nnaive_diff = [1°, 2°, -357°]  # HUGE SPIKE! 💥\n# RIGHT: Vector space derivative\nvectors = [(cos(θ), sin(θ)) for θ in angles]\ndvdt = [(v[i+1] - v[i])/dt for i in range(len(v)-1)]\n# Angular velocity from vector derivative\nω = cross_product(v[i], dvdt[i]) / |v[i]|²\n# Result: [1°/s, 1°/s, 1°/s] ✅</code></pre>\n</div>\n</div>\n<div class='card'>\n<h3>📉 Discrete Integrals (Accumulated Rotation)</h3>\n<div class='code-example'>\n<pre><code class='language-python'># WRONG: Sum angles directly\nangular_velocities = [90°/s, 90°/s, 90°/s, 90°/s]\nnaive_sum = sum(angular_velocities) * dt  # 360°???\n# RIGHT: Accumulate in vector space\nv_accumulated = [1, 0]  # Start at 0°\nfor ω in angular_velocities:\n    # Rotate vector by angular increment\n    dθ = ω * dt\n    rotation = [[cos(dθ), -sin(dθ)],\n                [sin(dθ), cos(dθ)]]\n    v_accumulated = rotation @ v_accumulated\nfinal_angle = atan2(v_accumulated)  # Correct!</code></pre>\n</div>\n</div>\n</div>\n<div class='success-box'>\n<h3>🔧 Practical Applications in Data Science</h3>\n<div class='two-column'>\n<div>\n<h4>🌊 Wind Speed Analysis</h4>\n<div class='code-example'>\n<pre><code class='language-python'># Wind direction time series (sampled every hour)\nwind_dirs = [350°, 355°, 0°, 5°, 10°]  # North-ish\nwind_speeds = [10, 12, 15, 14, 11]  # mph\n# Compute wind vector components\nu = [-speed * sin(dir) for speed, dir in zip(wind_speeds, wind_dirs)]\nv = [-speed * cos(dir) for speed, dir in zip(wind_speeds, wind_dirs)]\n# Now can compute proper derivatives!\ndu_dt = np.gradient(u)  # Wind acceleration (east)\ndv_dt = np.gradient(v)  # Wind acceleration (north)</code></pre>\n</div>\n</div>\n<div>\n<h4>🤖 Robot Heading Tracking</h4>\n<div class='code-example'>\n<pre><code class='language-python'># IMU gives heading samples at 100Hz\nheadings = sensor.get_heading_buffer()  # [θ₁, θ₂, ..., θₙ]\ndt = 0.01  # 10ms between samples\n# Convert to unit vectors\nvectors = [(cos(h), sin(h)) for h in headings]\n# Compute angular velocity using discrete derivative\nangular_vel = []\nfor i in range(len(vectors)-1):\n    # Cross product gives rotation rate\n    ω = (vectors[i][0]*vectors[i+1][1] - \n         vectors[i][1]*vectors[i+1][0]) / dt\n    angular_vel.append(ω)\n# Smooth using windowed average (no wraparound issues!)\nsmoothed_ω = moving_average(angular_vel, window=10)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class='warning-box'>\n<h3>⚠️ Common Pitfalls with Discrete Circular Data</h3>\n<div class='three-column'>\n<div>\n<h4>❌ Phase Unwrapping</h4>\n<p><code>unwrap([350°, 10°])</code> → <code>[350°, 370°]</code></p>\n<p>Creates artificial trends! Use vectors instead.</p>\n</div>\n<div>\n<h4>❌ Modulo Arithmetic</h4>\n<p><code>(θ₂ - θ₁) % 360</code></p>\n<p>Loses direction info. Vector difference preserves it.</p>\n</div>\n<div>\n<h4>❌ Averaging Raw Angles</h4>\n<p><code>mean([0°, 90°, 180°, 270°])</code> → <code>135°</code></p>\n<p>Should be undefined! Vector mean → 0.</p>\n</div>\n</div>\n</div>\n<div class='highlight-box'>\n<h3>🎯 The Key Pattern for Discrete Operations</h3>\n<div class='formula-showcase'>\n<div style='text-align: center; padding: 20px;'>\n<p style='font-size: 18px; margin: 10px 0;'>\n<strong>Discrete Samples</strong> → <strong>Vector Time Series</strong> → <strong>Standard Numpy Operations</strong> → <strong>Interpret Results</strong>\n</p>\n<p style='margin-top: 20px;'>\n<code>θ[t]</code> → <code>[cos(θ[t]), sin(θ[t])]</code> → <code>np.gradient(), np.cumsum()</code> → <code>atan2() if needed</code>\n</p>\n</div>\n</div>\n<p><strong>Bottom Line:</strong> NumPy/Pandas operations 'just work' on vector representations—no special circular functions needed!</p>\n</div>\n</div>",
  "6": "<div class='slide'>\n<h1>Hidden Rings Everywhere: Beyond Angles & Time</h1>\n<div class='warning-box'>\n<h3>🔍 Circular Quantities Hide in Plain Sight</h3>\n<p>It's not just angles, time, and colors that wrap around. Here are the sneaky cyclic variables that cause bugs when you least expect them:</p>\n</div>\n<div class='pattern-table'>\n<table style='width: 100%; border-collapse: collapse;'>\n<thead>\n<tr style='background: rgba(33, 150, 243, 0.1); border-bottom: 2px solid #2196F3;'>\n<th style='padding: 12px; text-align: left; width: 30%;'>Domain</th>\n<th style='padding: 12px; text-align: left; width: 35%;'>❌ Where Naive Math Fails</th>\n<th style='padding: 12px; text-align: left; width: 35%;'>✅ Correct Embedding</th>\n</tr>\n</thead>\n<tbody>\n<tr style='border-bottom: 1px solid #444;'>\n<td style='padding: 10px;'><strong>📅 Weekdays</strong><br><code>d ∈ {0..6}</code></td>\n<td style='padding: 10px;'>Mean of Sat(6) and Mon(1) = 3.5 (Wed)?<br><span style='color: #FF5722;'>Wrong! Should be Sunday</span></td>\n<td style='padding: 10px;'><code>(cos(2πd/7), sin(2πd/7))</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);'>\n<td style='padding: 10px;'><strong>🔧 Rotary Encoders</strong><br><code>n ∈ [0, 4096)</code></td>\n<td style='padding: 10px;'>4095 → 1 looks like −4094 ticks<br><span style='color: #FF5722;'>Actually just 2 ticks forward!</span></td>\n<td style='padding: 10px;'><code>(cos(2πn/N), sin(2πn/N))</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444;'>\n<td style='padding: 10px;'><strong>🌍 Longitude</strong><br><code>λ ∈ [−180°, 180°)</code></td>\n<td style='padding: 10px;'>Mean of 179°E and 179°W = 0°?<br><span style='color: #FF5722;'>Points are 2° apart, not at Greenwich!</span></td>\n<td style='padding: 10px;'>3D vectors on sphere:<br><code>(cos(lat)cos(lon), cos(lat)sin(lon), sin(lat))</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);'>\n<td style='padding: 10px;'><strong>📡 Signal Phase</strong><br><code>φ ∈ [−π, π)</code></td>\n<td style='padding: 10px;'>Phase unwrapping creates artificial jumps<br><span style='color: #FF5722;'>Destroys true periodicity</span></td>\n<td style='padding: 10px;'>Complex: <code>e<sup>iφ</sup> = cos(φ) + i·sin(φ)</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444;'>\n<td style='padding: 10px;'><strong>💍 Ring Buffers</strong><br><code>idx ∈ [0, size)</code></td>\n<td style='padding: 10px;'><code>tail - head</code> wrong when wrapped<br><span style='color: #FF5722;'>Buffer looks full when nearly empty!</span></td>\n<td style='padding: 10px;'><code>(idx + size) % size</code><br>or embed as angle</td>\n</tr>\n<tr style='border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);'>\n<td style='padding: 10px;'><strong>⚙️ Gear Teeth</strong><br><code>tooth ∈ [0, N)</code></td>\n<td style='padding: 10px;'>Tooth 0 and Tooth N-1 look maximally apart<br><span style='color: #FF5722;'>They're actually neighbors!</span></td>\n<td style='padding: 10px;'><code>(cos(2πt/N), sin(2πt/N))</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444;'>\n<td style='padding: 10px;'><strong>🧬 Circadian Phase</strong><br><code>t ∈ [0, 24h)</code></td>\n<td style='padding: 10px;'>Sleep at 23:00 and 01:00 averages to noon?<br><span style='color: #FF5722;'>Should be midnight!</span></td>\n<td style='padding: 10px;'><code>(cos(2πt/24), sin(2πt/24))</code></td>\n</tr>\n<tr style='border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);'>\n<td style='padding: 10px;'><strong>📊 Months of Year</strong><br><code>m ∈ {1..12}</code></td>\n<td style='padding: 10px;'>Dec(12) to Jan(1) = -11 months?<br><span style='color: #FF5722;'>Just 1 month forward!</span></td>\n<td style='padding: 10px;'><code>(cos(2πm/12), sin(2πm/12))</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class='highlight-box'>\n<h3>💡 The Universal Solution</h3>\n<div class='formula-showcase'>\n<p style='text-align: center; font-size: 18px; margin: 15px 0;'>\n<strong>For ANY cyclic quantity with period T starting at offset s:</strong>\n</p>\n<p style='text-align: center; font-size: 20px; background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 8px;'>\n<code>θ = 2π(value - s)/T</code> → <code>(cos(θ), sin(θ))</code>\n</p>\n<p style='text-align: center; margin-top: 15px;'>\nDo all your math in vector space, then project back if needed!\n</p>\n</div>\n</div>\n<div class='info-box'>\n<h3>🎯 When to Suspect a Hidden Ring</h3>\n<div class='two-column'>\n<div>\n<h4>🚩 Red Flags in Your Data</h4>\n<ul>\n<li>Values that 'roll over' or 'wrap'</li>\n<li>Modulo operations in the code</li>\n<li>Special cases for 'crossing midnight'</li>\n<li>Discontinuous jumps in time series</li>\n<li>'Distance' that depends on direction</li>\n</ul>\n</div>\n<div>\n<h4>🐛 Classic Bug Patterns</h4>\n<ul>\n<li>Averages that are wildly wrong</li>\n<li>Interpolation that takes the 'long way'</li>\n<li>Derivatives with impossible spikes</li>\n<li>Sorting that puts neighbors far apart</li>\n<li>Clustering that splits natural groups</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "7": "<div class='slide'>\n<h1>When Zero Isn't Special: Arbitrary Wrap Points</h1>\n<div class='warning-box'>\n<h3>🎯 Real Hardware Doesn't Care About Zero</h3>\n<p>Many circular quantities in the wild wrap at arbitrary values, not nice round numbers. The math still works—you just need to normalize first!</p>\n</div>\n<div class='two-column-equal'>\n<div class='card'>\n<h3>📊 Common Non-Zero Wrap Domains</h3>\n<div class='example-list'>\n<div class='example-item'>\n<h4>🧭 Compass: [-180°, +180°)</h4>\n<p>Wraps at ±180°, not 0°/360°</p>\n<code>bearing ∈ [-180, 180)</code>\n</div>\n<div class='example-item'>\n<h4>🔧 Rotary Encoder: [1000, 5096)</h4>\n<p>12-bit encoder with arbitrary offset</p>\n<code>counts ∈ [1000, 5096)</code>\n</div>\n<div class='example-item'>\n<h4>📡 Phase: [-π, +π)</h4>\n<p>Centered around zero, not starting at it</p>\n<code>phase ∈ [-π, π)</code>\n</div>\n<div class='example-item'>\n<h4>🗓️ Fiscal Year: [Apr, Mar]</h4>\n<p>Wraps at March/April boundary</p>\n<code>month ∈ [4, 3] (mod 12)</code>\n</div>\n<div class='example-item'>\n<h4>🌡️ ADC Values: [512, 3584)</h4>\n<p>Sensor with DC offset and limited range</p>\n<code>adc ∈ [512, 3584)</code>\n</div>\n</div>\n</div>\n<div class='card'>\n<h3>✨ The Universal Transform</h3>\n<div class='formula-showcase' style='background: rgba(76, 175, 80, 0.1); padding: 20px; border-radius: 8px; margin: 20px 0;'>\n<h4>For any circular quantity:</h4>\n<p><code>value ∈ [min, max)</code></p>\n<p style='margin: 15px 0;'>↓</p>\n<p><strong>1. Normalize to [0, 1):</strong></p>\n<p><code>t = (value - min) / (max - min)</code></p>\n<p style='margin: 15px 0;'>↓</p>\n<p><strong>2. Embed on unit circle:</strong></p>\n<p><code>v = (cos(2πt), sin(2πt))</code></p>\n<p style='margin: 15px 0;'>↓</p>\n<p><strong>3. Do your math in ℝ²</strong></p>\n<p style='margin: 15px 0;'>↓</p>\n<p><strong>4. Project back if needed:</strong></p>\n<p><code>result = min + (max-min) × atan2(v.y, v.x)/(2π)</code></p>\n</div>\n</div>\n</div>\n<div class='success-box'>\n<h3>💻 Code Example: Averaging Compass Bearings</h3>\n<div class='code-example'>\n<pre><code class='language-python'># PROBLEM: Compass uses [-180°, +180°) not [0°, 360°)\nbearings = [170, 175, -175, -170]  # All pointing roughly south\n# WRONG: Simple average\nnaive_mean = np.mean(bearings)  # = 0° (North!) 🤦\n# RIGHT: Normalize → Embed → Average → Denormalize\ndef circular_mean(values, min_val, max_val):\n    # Step 1: Normalize to [0, 1)\n    period = max_val - min_val\n    normalized = [(v - min_val) / period for v in values]\n    \n    # Step 2: Embed on circle\n    vectors = [(np.cos(2*np.pi*t), np.sin(2*np.pi*t)) for t in normalized]\n    \n    # Step 3: Average in vector space\n    mean_vector = np.mean(vectors, axis=0)\n    \n    # Step 4: Project back to original domain\n    angle = np.atan2(mean_vector[1], mean_vector[0])\n    result = min_val + (angle / (2*np.pi)) * period\n    if result < min_val:\n        result += period\n    return result\ncorrect_mean = circular_mean(bearings, -180, 180)  # ≈ 175° South! ✅</code></pre>\n</div>\n</div>\n<div class='info-box'>\n<h3>🔧 Practical Examples</h3>\n<div class='three-column'>\n<div>\n<h4>🎮 Game Development</h4>\n<div class='code-snippet'>\n<pre><code># Joystick angle ∈ [-π, π]\njs_angle = atan2(js.y, js.x)\n# Don't compare directly!\n# Normalize first</code></pre>\n</div>\n</div>\n<div>\n<h4>🤖 Robotics</h4>\n<div class='code-snippet'>\n<pre><code># Encoder wraps at 8192\n# but starts at 1000\nactual_pos = 1000 + \n  (raw - 1000) % 7192</code></pre>\n</div>\n</div>\n<div>\n<h4>📊 Time Series</h4>\n<div class='code-snippet'>\n<pre><code># Fiscal quarters Q2-Q1\n# April = month 0\nfiscal_month = \n  (cal_month - 4) % 12</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class='highlight-box'>\n<h3>🎯 Key Insight</h3>\n<p style='font-size: 18px; text-align: center; margin: 20px 0;'>\n<strong>The 'zero point' is arbitrary!</strong> What matters is the <em>topology</em>—that values wrap around.\n</p>\n<p style='text-align: center;'>\nAlways normalize to [0, 1) or [0, 2π) before embedding. Your vector math doesn't care where the original wrap point was.\n</p>\n</div>\n</div>",
  "8": "<div class='slide'>\n<h1>Real Example: Robot/Drone Heading Control</h1>\n<div class='problem-setup'>\n<h3>🤖 The Scenario</h3>\n<p>PID controller needs to turn robot from 350° to 10°</p>\n</div>\n<div class='visual-comparison'>\n<div class='approach bad-approach'>\n<h4>❌ Naive PID Error</h4>\n<svg width='500' height='500' viewBox='0 0 250 250'>\n<circle cx='125' cy='125' r='100' fill='none' stroke='#333' stroke-width='2'/>\n<!-- Current heading: 350° -->\n<line x1='125' y1='125' x2='115' y2='25' stroke='#2196F3' stroke-width='4'/>\n<circle cx='115' cy='25' r='6' fill='#2196F3'/>\n<text x='75' y='15' font-size='12' fill='#FFC107'>Current: 350°</text>\n<!-- Target heading: 10° -->\n<line x1='125' y1='125' x2='135' y2='25' stroke='#4CAF50' stroke-width='4'/>\n<circle cx='135' cy='25' r='6' fill='#4CAF50'/>\n<text x='175' y='15' font-size='12' fill='#FFC107'>Target: 10°</text>\n<!-- Wrong rotation path -->\n<path d='M 115 25 A 100 100 0 1 1 135 25' fill='none' stroke='#FF5722' stroke-width='3' stroke-dasharray='5,5'/>\n<text x='125' y='200' text-anchor='middle' font-size='14' fill='#FF5722' font-weight='bold'>\nError: -340°\n</text>\n<text x='125' y='220' text-anchor='middle' font-size='12' fill='#FF5722'>\nSpins backward!\n</text>\n</svg>\n<pre><code>error = target - current\nerror = 10 - 350 = -340°\n# Robot spins almost full circle\n# the wrong way!</code></pre>\n</div>\n<div class='approach good-approach'>\n<h4>✅ Embedded Solution</h4>\n<svg width='500' height='500' viewBox='0 0 250 250'>\n<circle cx='125' cy='125' r='100' fill='none' stroke='#333' stroke-width='2'/>\n<!-- Current heading: 350° -->\n<line x1='125' y1='125' x2='115' y2='25' stroke='#2196F3' stroke-width='4'/>\n<circle cx='115' cy='25' r='6' fill='#2196F3'/>\n<text x='75' y='15' font-size='12' fill='#FFC107'>Current: 350°</text>\n<!-- Target heading: 10° -->\n<line x1='125' y1='125' x2='135' y2='25' stroke='#4CAF50' stroke-width='4'/>\n<circle cx='135' cy='25' r='6' fill='#4CAF50'/>\n<text x='175' y='15' font-size='12' fill='#FFC107'>Target: 10°</text>\n<!-- Correct rotation path -->\n<path d='M 115 25 A 100 100 0 0 1 135 25' fill='none' stroke='#4CAF50' stroke-width='3'/>\n<text x='125' y='200' text-anchor='middle' font-size='14' fill='#4CAF50' font-weight='bold'>\nError: +20°\n</text>\n<text x='125' y='220' text-anchor='middle' font-size='12' fill='#4CAF50'>\nEfficient turn!\n</text>\n</svg>\n<pre><code>def heading_error(current, target):\n    c_vec = [cos(current), sin(current)]\n    t_vec = [cos(target), sin(target)]\n    return atan2(cross(c_vec, t_vec), \n                 dot(c_vec, t_vec))\n# Returns: +20° (shortest path!)</code></pre>\n</div>\n</div>\n<div class='implementation'>\n<h3>Complete PID Controller Fix</h3>\n<pre><code class='language-python'>class HeadingController:\n    def __init__(self, kp=1.0, ki=0.1, kd=0.05):\n        self.kp, self.ki, self.kd = kp, ki, kd\n        self.integral = 0\n        self.last_error = 0\n        \n    def compute_control(self, current_heading, target_heading, dt):\n        # Embed both headings as vectors\n        current_vec = np.array([np.cos(current_heading), np.sin(current_heading)])\n        target_vec = np.array([np.cos(target_heading), np.sin(target_heading)])\n        \n        # Compute signed angle error (always shortest path)\n        error = np.arctan2(\n            current_vec[0] * target_vec[1] - current_vec[1] * target_vec[0],\n            current_vec[0] * target_vec[0] + current_vec[1] * target_vec[1]\n        )\n        \n        # Standard PID computation (now with correct error!)\n        self.integral += error * dt\n        derivative = (error - self.last_error) / dt\n        \n        control = self.kp * error + self.ki * self.integral + self.kd * derivative\n        self.last_error = error\n        \n        return control  # Angular velocity command</code></pre>\n</div>\n<div class='impact-note'>\n<p>💰 <strong>Real Impact:</strong> Mars Climate Orbiter was lost due to a units/wraparound error. Cost: $327.6 million</p>\n</div>\n</div>",
  "9": "<div class='slide'>\n<h1>Color Interpolation (HSV Hue)</h1>\n<div class='color-problem'>\n<h3>🎨 The Problem: Fade from Red to Magenta</h3>\n<div class='color-display'>\n<div class='color-box' style='background: hsl(10, 100%, 50%);'>\n<span>Red<br>10°</span>\n</div>\n<div class='arrow'>→</div>\n<div class='color-box' style='background: hsl(350, 100%, 50%);'>\n<span>Magenta<br>350°</span>\n</div>\n</div>\n</div>\n<div class='approaches'>\n<div class='approach-bad'>\n<h4>❌ Linear Interpolation</h4>\n<div class='color-gradient bad-gradient'>\n<div class='color-step' style='background: hsl(10, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(68, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(126, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(180, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(238, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(296, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(350, 100%, 50%);'></div>\n</div>\n<pre><code>mid_hue = (10 + 350) / 2 = 180°  # CYAN!?\n# Goes through entire rainbow!</code></pre>\n</div>\n<div class='approach-good'>\n<h4>✅ Circular Interpolation</h4>\n<div class='color-gradient good-gradient'>\n<div class='color-step' style='background: hsl(10, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(6, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(2, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(358, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(354, 100%, 50%);'></div>\n<div class='color-step' style='background: hsl(350, 100%, 50%);'></div>\n</div>\n<pre><code>vec1 = [cos(10°), sin(10°)]\nvec2 = [cos(350°), sin(350°)]\nvec_mid = normalize((vec1 + vec2) / 2)\nmid_hue = atan2(vec_mid)  # 0° (stays red!)</code></pre>\n</div>\n</div>\n<div class='implementation-example'>\n<h3>Production-Ready Color Lerp</h3>\n<pre><code class='javascript'>function lerpHue(h1, h2, t) {\n    // Convert hues to radians\n    const theta1 = h1 * Math.PI / 180;\n    const theta2 = h2 * Math.PI / 180;\n    \n    // Embed on unit circle\n    const v1 = [Math.cos(theta1), Math.sin(theta1)];\n    const v2 = [Math.cos(theta2), Math.sin(theta2)];\n    \n    // Interpolate vectors\n    const vt = [\n        (1 - t) * v1[0] + t * v2[0],\n        (1 - t) * v1[1] + t * v2[1]\n    ];\n    \n    // Normalize and convert back\n    const norm = Math.sqrt(vt[0]**2 + vt[1]**2);\n    const thetaT = Math.atan2(vt[1]/norm, vt[0]/norm);\n    \n    return (thetaT * 180 / Math.PI + 360) % 360;\n}\n// CSS gradient generator\nfunction generateGradient(h1, h2, steps) {\n    const colors = [];\n    for (let i = 0; i <= steps; i++) {\n        const t = i / steps;\n        const h = lerpHue(h1, h2, t);\n        colors.push(`hsl(${h}, 100%, 50%)`);\n    }\n    return `linear-gradient(90deg, ${colors.join(', ')})`;\n}</code></pre>\n</div>\n<div class='use-cases'>\n<h3>Where This Matters</h3>\n<ul>\n<li>🎮 <strong>Game UI:</strong> Health bar color transitions</li>\n<li>📊 <strong>Data Viz:</strong> Temperature/pressure heatmaps</li>\n<li>🎬 <strong>Animation:</strong> Smooth color transitions</li>\n<li>🖼️ <strong>Image Processing:</strong> Color correction algorithms</li>\n</ul>\n</div>\n</div>",
  "10": "<div class='slide'>\n<h1>The General Pattern</h1>\n<div class='pattern-table'>\n<h3>Any Circular Quantity Can Be Embedded!</h3>\n<table>\n<thead>\n<tr>\n<th>Wraparound Quantity</th>\n<th>Traditional Problems</th>\n<th>Embedding Solution</th>\n<th>Benefits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Angle</strong><br>θ ∈ [0, 2π)</td>\n<td>Gimbal lock, discontinuities</td>\n<td>(cos θ, sin θ) ∈ ℝ²</td>\n<td>Smooth interpolation</td>\n</tr>\n<tr>\n<td><strong>Time of Day</strong><br>t ∈ [0, 24)</td>\n<td>Midnight wraparound</td>\n<td>(cos 2πt/24, sin 2πt/24)</td>\n<td>No special cases</td>\n</tr>\n<tr>\n<td><strong>Day of Week</strong><br>d ∈ {0..6}</td>\n<td>Weekend averaging</td>\n<td>e^(2πid/7) or 7D one-hot</td>\n<td>Correct statistics</td>\n</tr>\n<tr>\n<td><strong>Phase</strong><br>φ ∈ [-π, π)</td>\n<td>Phase unwrapping</td>\n<td>e^(iφ) ∈ ℂ</td>\n<td>Natural operations</td>\n</tr>\n<tr>\n<td><strong>Encoder Position</strong><br>n ∈ [0, 4096)</td>\n<td>Rollover detection</td>\n<td>(cos 2πn/4096, sin 2πn/4096)</td>\n<td>Continuous tracking</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class='universal-class'>\n<h3>One Class to Rule Them All</h3>\n<pre><code class='language-python'>class CircularQuantity:\n    '''Universal handler for any quantity that wraps around'''\n    \n    def __init__(self, value, period):\n        self.period = period\n        self.value = value % period  # Normalize to [0, period)\n        \n        # THE KEY: Embed on unit circle\n        theta = 2 * np.pi * self.value / period\n        self.vec = np.array([np.cos(theta), np.sin(theta)])\n    \n    def shortest_distance_to(self, other):\n        '''Always returns shortest signed distance'''\n        angle = np.arctan2(\n            self.vec[0] * other.vec[1] - self.vec[1] * other.vec[0],\n            self.vec[0] * other.vec[0] + self.vec[1] * other.vec[1]\n        )\n        return angle * self.period / (2 * np.pi)\n    \n    def average_with(self, others):\n        '''Proper circular mean'''\n        all_vecs = [self.vec] + [o.vec for o in others]\n        mean_vec = np.mean(all_vecs, axis=0)\n        mean_vec /= np.linalg.norm(mean_vec)  # Renormalize\n        \n        angle = np.arctan2(mean_vec[1], mean_vec[0])\n        mean_value = angle * self.period / (2 * np.pi)\n        return CircularQuantity(mean_value, self.period)\n    \n    def interpolate_to(self, other, t):\n        '''Smooth interpolation along shortest path'''\n        # SLERP for perfect circular interpolation\n        dot = np.dot(self.vec, other.vec)\n        omega = np.arccos(np.clip(dot, -1, 1))\n        \n        if abs(omega) < 1e-10:  # Vectors are identical\n            return self\n        \n        vec_t = (np.sin((1-t)*omega)/np.sin(omega) * self.vec +\n                 np.sin(t*omega)/np.sin(omega) * other.vec)\n        \n        angle = np.arctan2(vec_t[1], vec_t[0])\n        value = angle * self.period / (2 * np.pi)\n        return CircularQuantity(value, self.period)</code></pre>\n</div>\n<div class='examples-grid'>\n<div class='example'>\n<h4>📐 Angles</h4>\n<pre><code>a1 = CircularQuantity(350, 360)\na2 = CircularQuantity(10, 360)\ndist = a1.shortest_distance_to(a2)\n# Result: 20°</code></pre>\n</div>\n<div class='example'>\n<h4>⏰ Time</h4>\n<pre><code>t1 = CircularQuantity(23.5, 24)\nt2 = CircularQuantity(0.5, 24)\navg = t1.average_with([t2])\n# Result: 0.0 (midnight)</code></pre>\n</div>\n<div class='example'>\n<h4>📅 Weekdays</h4>\n<pre><code>days = [CircularQuantity(6, 7),  # Sat\n        CircularQuantity(0, 7),  # Sun\n        CircularQuantity(1, 7)]  # Mon\navg = days[0].average_with(days[1:])\n# Result: 0 (Sunday)</code></pre>\n</div>\n<div class='example'>\n<h4>🔄 Encoder</h4>\n<pre><code>e1 = CircularQuantity(4090, 4096)\ne2 = CircularQuantity(10, 4096)\ndelta = e1.shortest_distance_to(e2)\n# Result: 20 counts</code></pre>\n</div>\n</div>\n</div>",
  "11": "<div class='slide'>\n<h1>The Mathematical Insight</h1>\n<div class='info-box'>\n<h3>Why Does This Work?</h3>\n<div class='visual-demo'>\n<svg width='600' height='150' viewBox='0 0 600 150'>\n<!-- Line with endpoints -->\n<g transform='translate(100, 75)'>\n<line x1='-60' y1='0' x2='60' y2='0' stroke='#333' stroke-width='3'/>\n<circle cx='-60' cy='0' r='6' fill='#FF5722'/>\n<circle cx='60' cy='0' r='6' fill='#FF5722'/>\n<text x='0' y='30' text-anchor='middle' font-size='14' fill='#FFC107'>Line has endpoints</text>\n</g>\n<!-- vs -->\n<text x='300' y='80' text-anchor='middle' font-size='20' fill='#FFC107'>vs</text>\n<!-- Circle -->\n<g transform='translate(500, 75)'>\n<circle cx='0' cy='0' r='50' fill='none' stroke='#333' stroke-width='3'/>\n<text x='0' y='80' text-anchor='middle' font-size='14' fill='#FFC107'>Circle has none!</text>\n</g>\n</svg>\n</div>\n<p class='text-center'>A circle (S¹) is topologically different from a line segment. Linear math breaks at the wraparound point.</p>\n</div>\n<div class='two-column-equal'>\n<div class='card'>\n<h3>🌐 The Circle Problem</h3>\n<ul>\n<li><strong>Circles have no 'beginning' or 'end'</strong></li>\n<li>359° and 1° are neighbors</li>\n<li>But arithmetic says 359 - 1 = 358 🤦</li>\n<li>→ Solution: Use 2D vectors instead!</li>\n</ul>\n</div>\n<div class='card'>\n<h3>🔄 The Wrapping Function</h3>\n<svg width='300' height='120' viewBox='0 0 300 120'>\n<path d='M 20 80 Q 70 20, 120 80 T 220 80 T 280 80' stroke='#2196F3' stroke-width='3' fill='none'/>\n<text x='50' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>0°</text>\n<text x='120' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>360°</text>\n<text x='190' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>720°</text>\n<text x='260' y='60' text-anchor='middle' font-size='12' fill='#FFC107'>1080°</text>\n</svg>\n<p>Angles wrap around: 370° = 10°, 730° = 10°, etc. The infinite line wraps onto the finite circle.</p>\n</div>\n</div>\n<div class='success-box'>\n<h3>🔑 The Universal Pattern</h3>\n<div class='process-flow'>\n<div class='process-step'>\n<h4>Problem Space</h4>\n<p>Non-linear manifold</p>\n<small>(circle, sphere, torus)</small>\n</div>\n<div class='process-step'>\n<h4>Embedding</h4>\n<p>Lift to linear space</p>\n<small>(ℝ², ℝ³, ℂ)</small>\n</div>\n<div class='process-step'>\n<h4>Computation</h4>\n<p>Do linear algebra</p>\n<small>(add, average, interpolate)</small>\n</div>\n<div class='process-step'>\n<h4>Projection</h4>\n<p>Map back to manifold</p>\n<small>(atan2, normalize)</small>\n</div>\n</div>\n</div>\n<div class='two-column'>\n<div class='warning-box'>\n<h3>🎯 Where Else This Appears</h3>\n<ul>\n<li><strong>Quaternions:</strong> 3D rotations in 4D space</li>\n<li><strong>Complex Numbers:</strong> 2D rotations in ℂ</li>\n<li><strong>Fourier Transform:</strong> Signals on unit circle</li>\n<li><strong>Neural Networks:</strong> Learned embeddings</li>\n</ul>\n</div>\n<div class='highlight-box'>\n<h3>💭 Mathematical Insight</h3>\n<blockquote style='font-style: italic; margin: 10px 0;'>\n'The introduction of numbers as coordinates is an act of violence.'\n<br><cite style='font-size: 14px;'>— Hermann Weyl</cite>\n</blockquote>\n<p><strong>But sometimes, the right coordinates make the violence worthwhile!</strong></p>\n</div>\n</div>\n</div>",
  "12": "<div class='slide'>\n<h1>Key Takeaways</h1>\n<div class='main-takeaway'>\n<h2>🎯 The Golden Rule</h2>\n<div class='golden-rule'>\n<p>When you see a quantity that wraps around,</p>\n<p><strong>ask: 'Can I embed this on a circle?'</strong></p>\n</div>\n</div>\n<div class='practical-steps'>\n<h3>Your Debugging Checklist</h3>\n<div class='checklist'>\n<div class='check-item'>\n<span class='checkbox'>✓</span>\n<div>\n<h4>Spot the Wraparound</h4>\n<p>Does your value jump discontinuously? (359° → 0°, 11:59 PM → 12:00 AM)</p>\n</div>\n</div>\n<div class='check-item'>\n<span class='checkbox'>✓</span>\n<div>\n<h4>Identify the Period</h4>\n<p>What's the cycle length? (360° for angles, 24 hours for time, 7 for weekdays)</p>\n</div>\n</div>\n<div class='check-item'>\n<span class='checkbox'>✓</span>\n<div>\n<h4>Choose Your Embedding</h4>\n<p>Usually: <code style='display: inline-block;'>(cos(<span style='display: inline-block; vertical-align: middle;'><span style='display: block; text-align: center; border-bottom: 1px solid;'>2πx</span><span style='display: block; text-align: center;'>T</span></span>), sin(<span style='display: inline-block; vertical-align: middle;'><span style='display: block; text-align: center; border-bottom: 1px solid;'>2πx</span><span style='display: block; text-align: center;'>T</span></span>))</code> where <code>T</code> is the period</p>\n</div>\n</div>\n<div class='check-item'>\n<span class='checkbox'>✓</span>\n<div>\n<h4>Work in Vector Space</h4>\n<p>Do all math on the vectors, not the raw values</p>\n</div>\n</div>\n<div class='check-item'>\n<span class='checkbox'>✓</span>\n<div>\n<h4>Project Back When Needed</h4>\n<p>Use <code>atan2(y, x)</code> to recover the original quantity</p>\n</div>\n</div>\n</div>\n</div>\n<div class='libraries-section'>\n<h3>Don't Reinvent: Use Libraries!</h3>\n<div class='library-grid'>\n<div class='library'>\n<h4>Python</h4>\n<ul>\n<li><code>scipy.stats.circmean</code></li>\n<li><code>astropy.coordinates</code></li>\n<li><code>pyquaternion</code></li>\n</ul>\n</div>\n<div class='library'>\n<h4>JavaScript</h4>\n<ul>\n<li><code>d3-interpolate</code></li>\n<li><code>three.js Quaternion</code></li>\n<li><code>tinycolor2</code></li>\n</ul>\n</div>\n<div class='library'>\n<h4>C++</h4>\n<ul>\n<li><code>Eigen::AngleAxis</code></li>\n<li><code>boost::geometry</code></li>\n<li><code>tf2</code> (ROS)</li>\n</ul>\n</div>\n<div class='library'>\n<h4>MATLAB</h4>\n<ul>\n<li><code>circstat toolbox</code></li>\n<li><code>Aerospace Toolbox</code></li>\n<li><code>angle()</code>, <code>unwrap()</code></li>\n</ul>\n</div>\n</div>\n</div>\n<div class='red-flags'>\n<h3>🚩 Red Flags in Your Code</h3>\n<div class='flag-list'>\n<div class='flag'>\n<code>if (angle > 180) angle -= 360;</code>\n<span>→ Use circular math instead</span>\n</div>\n<div class='flag'>\n<code>if (crossed_midnight) /* special case */</code>\n<span>→ Embed on 24-hour circle</span>\n</div>\n<div class='flag'>\n<code>while (phase > π) phase -= 2π;</code>\n<span>→ Work with complex exponentials</span>\n</div>\n<div class='flag'>\n<code>// TODO: handle wraparound</code>\n<span>→ Today's the day!</span>\n</div>\n</div>\n</div>\n<div class='success-story'>\n<div class='story-content'>\n<h3>🎉 Success Story</h3>\n<p>'After this talk, I fixed a 3-year-old GPS bearing bug in 5 lines of code. The robot finally drives in straight lines!'</p>\n<cite>— Future You</cite>\n</div>\n</div>\n</div>",
  "13": "<div class='slide'>\n<h1>Interactive Demo</h1>\n<div class='demo-container'>\n<div class='demo-section'>\n<h3>🎮 Try It Yourself: Angle Averaging</h3>\n<div class='angle-inputs'>\n<label>\nAngle 1: <input type='range' id='angle1' min='0' max='359' value='350'>\n<span id='angle1-display'>350°</span>\n</label>\n<label>\nAngle 2: <input type='range' id='angle2' min='0' max='359' value='10'>\n<span id='angle2-display'>10°</span>\n</label>\n</div>\n<div class='demo-visual'>\n<svg width='400' height='400' viewBox='0 0 400 400' id='demo-svg'>\n<!-- Circle -->\n<circle cx='200' cy='200' r='150' fill='none' stroke='#333' stroke-width='2'/>\n<!-- Compass labels -->\n<text x='200' y='30' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>0°</text>\n<text x='370' y='205' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>90°</text>\n<text x='200' y='380' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>180°</text>\n<text x='30' y='205' text-anchor='middle' font-size='16' font-weight='bold' fill='#FFC107'>270°</text>\n<!-- Angle 1 line -->\n<line id='angle1-line' x1='200' y1='200' x2='200' y2='50' stroke='#2196F3' stroke-width='4'/>\n<circle id='angle1-point' cx='200' cy='50' r='8' fill='#2196F3'/>\n<!-- Angle 2 line -->\n<line id='angle2-line' x1='200' y1='200' x2='200' y2='50' stroke='#4CAF50' stroke-width='4'/>\n<circle id='angle2-point' cx='200' cy='50' r='8' fill='#4CAF50'/>\n<!-- Average (wrong) -->\n<line id='avg-wrong-line' x1='200' y1='200' x2='200' y2='350' stroke='#FF5722' stroke-width='3' stroke-dasharray='5,5' opacity='0'/>\n<circle id='avg-wrong-point' cx='200' cy='350' r='6' fill='#FF5722' opacity='0'/>\n<!-- Average (correct) -->\n<line id='avg-correct-line' x1='200' y1='200' x2='200' y2='50' stroke='#FFC107' stroke-width='4'/>\n<circle id='avg-correct-point' cx='200' cy='50' r='8' fill='#FFC107'/>\n</svg>\n</div>\n<div class='demo-results'>\n<div class='result wrong-result'>\n<h4>❌ Linear Average</h4>\n<p id='wrong-result'>180°</p>\n</div>\n<div class='result correct-result'>\n<h4>✅ Circular Average</h4>\n<p id='correct-result'>0°</p>\n</div>\n</div>\n</div>\n<div class='code-section'>\n<h3>The Code Behind It</h3>\n<pre><code id='demo-code'>function circularAverage(a1, a2) {\n    // Convert to radians\n    const theta1 = a1 * Math.PI / 180;\n    const theta2 = a2 * Math.PI / 180;\n    \n    // Embed on unit circle\n    const v1 = [Math.cos(theta1), Math.sin(theta1)];\n    const v2 = [Math.cos(theta2), Math.sin(theta2)];\n    \n    // Average vectors\n    const avgVec = [(v1[0] + v2[0])/2, (v1[1] + v2[1])/2];\n    \n    // Convert back to angle\n    const avgTheta = Math.atan2(avgVec[1], avgVec[0]);\n    return (avgTheta * 180 / Math.PI + 360) % 360;\n}</code></pre>\n</div>\n</div>\n</div>",
  "14": "<div class='slide' style='display:grid; gap:12px;'>\n<h1>🌍 GIS Demo: Longitude Wraparound at the International Date Line</h1>\n<div class='info-box'>\n<h3>Real-World Problem: Computing Geographic Means</h3>\n<p>When averaging GPS coordinates near ±180° longitude (International Date Line), linear arithmetic fails spectacularly. A farm field split by the date line appears to span the entire globe!</p>\n</div>\n<div id='map' style='height:600px; border-radius:12px; overflow:hidden; border:1px solid rgba(255,255,255,.15)'></div>\n<div style='display:flex; gap:16px; flex-wrap:wrap; align-items:center;'>\n<label><input type='checkbox' id='worldCopy' checked> worldCopyJump (wrap world)</label>\n<label><input type='checkbox' id='noWrapTiles'> tile noWrap (stop wrapping tiles)</label>\n<span id='readout' style='opacity:.9; font-family: monospace;'>Circular mean: …</span>\n</div>\n<div class='success-box'>\n<h3>🎯 Try This: Drag the markers across the International Date Line!</h3>\n<p><strong>Red marker</strong> = Wrong linear mean | <strong>Green marker</strong> = Correct circular mean</p>\n<p>Watch how the linear mean jumps to the middle of the Atlantic while the circular mean stays put! This is the classic longitude wraparound bug.</p>\n</div>\n<div class='code-example'>\n<h3>Spherical Coordinate Embedding</h3>\n<pre><code class='language-python'># For full lat/long geometry operations\ndef latlon_to_cartesian(lat, lon):\n    '''Embed (lat,lon) in R³ for linear operations'''\n    lat_rad = np.radians(lat)\n    lon_rad = np.radians(lon)\n    return np.array([\n        np.cos(lat_rad) * np.cos(lon_rad),  # x\n        np.cos(lat_rad) * np.sin(lon_rad),  # y  \n        np.sin(lat_rad)                     # z\n    ])\n# Geographic centroid (works across antimeridian!)\ndef geographic_centroid(lat_lon_pairs):\n    cartesian_points = [latlon_to_cartesian(lat, lon) \n                       for lat, lon in lat_lon_pairs]\n    mean_cartesian = np.mean(cartesian_points, axis=0)\n    mean_cartesian /= np.linalg.norm(mean_cartesian)  # Back to unit sphere\n    \n    # Convert back to lat/lon\n    lat = np.degrees(np.arcsin(mean_cartesian[2]))\n    lon = np.degrees(np.arctan2(mean_cartesian[1], mean_cartesian[0]))\n    return lat, lon</code></pre>\n</div>\n<div class='warning-box'>\n<h3>🏢 Company Applications</h3>\n<ul>\n<li><strong>Spatial Statistics:</strong> Computing true centroids for service areas</li>\n<li><strong>Route Optimization:</strong> Distance calculations that work globally</li>\n<li><strong>Geofencing:</strong> Boundary checks that don't break at meridians</li>\n<li><strong>Data Quality:</strong> Detecting GPS outliers using proper spherical distance</li>\n</ul>\n</div>\n</div>",
  "15": "<div class='slide' style='display:grid; gap:12px;'>\n<h1>🧮 Interactive Vector Calculator</h1>\n<div class='info-box'>\n<h3>Angle Arithmetic in Action</h3>\n<p>Drag the red and blue handles around the circle to see vector addition and subtraction in real-time. The background shows the atan2 field - each color represents a different angle!</p>\n</div>\n<div style='display:flex; gap:16px; flex-wrap:wrap; align-items:center; margin-bottom:12px;'>\n<label for='vector-operation'>Operation:</label>\n<select id='vector-operation' style='padding:8px; border-radius:6px; background:#2d3748; color:white; border:1px solid #4a5568;'>\n<option value='addition'>Vector Addition</option>\n<option value='subtraction'>Vector Subtraction</option>\n</select>\n</div>\n<div id='vector-calculator-container' style='width: 100%; height: 500px; border-radius:12px; overflow:hidden; border:1px solid rgba(255,255,255,.15);'></div>\n<div class='success-box'>\n<h3>🎯 How It Works</h3>\n<p><strong>Addition:</strong> Yellow vector = Red angle + Blue angle (vector rotation)</p>\n<p><strong>Subtraction:</strong> Pink vector = Red angle - Blue angle (angular difference)</p>\n<p>The colorful background shows the atan2 function - it maps every pixel's position to an angle!</p>\n</div>\n<div class='code-example'>\n<h3>The Math Behind It</h3>\n<pre><code class='language-python'># Vector addition in angle space\ndef add_angles(angle1, angle2):\n    '''Add two angles - equivalent to rotating one by the other'''\n    return (angle1 + angle2) % (2 * np.pi)\ndef subtract_angles(angle1, angle2):\n    '''Find angular difference between two angles'''\n    diff = angle1 - angle2\n    # Handle wraparound\n    if diff > np.pi:\n        diff -= 2 * np.pi\n    elif diff < -np.pi:\n        diff += 2 * np.pi\n    return diff</code></pre>\n</div>\n</div>",
  "16": "<div class='slide' style='display:grid; gap:12px;'>\n<h1>📈 Time Series Analyzer</h1>\n<div class='info-box'>\n<h3>Circular Statistics in Practice</h3>\n<p>Click anywhere to add angle measurements to your time series. See how circular averaging and derivatives work on real data sequences!</p>\n</div>\n<div style='display:flex; gap:16px; flex-wrap:wrap; align-items:center; margin-bottom:12px;'>\n<label for='timeseries-operation'>Analysis:</label>\n<select id='timeseries-operation' style='padding:8px; border-radius:6px; background:#2d3748; color:white; border:1px solid #4a5568;'>\n<option value='average'>Circular Mean</option>\n<option value='derivatives'>Angular Derivatives</option>\n</select>\n<button id='clear-points' style='padding:8px 16px; border-radius:6px; background:#e53e3e; color:white; border:none; cursor:pointer;'>Clear Points</button>\n</div>\n<div id='timeseries-analyzer-container' style='width: 100%; height: 500px; border-radius:12px; overflow:hidden; border:1px solid rgba(255,255,255,.15);'></div>\n<div class='success-box'>\n<h3>🎯 Interactive Features</h3>\n<p><strong>Circular Mean:</strong> Yellow vector shows the true average direction (handles wraparound!)</p>\n<p><strong>Derivatives:</strong> Colored vectors show angular velocity between consecutive points</p>\n<p><strong>Pro Tip:</strong> Try clicking points that cross the 180°/-180° boundary to see wraparound handling!</p>\n</div>\n<div class='code-example'>\n<h3>Circular Statistics Implementation</h3>\n<pre><code class='language-python'># Circular mean - the RIGHT way to average angles\ndef circular_mean(angles):\n    '''Compute mean angle using vector averaging'''\n    x = np.mean(np.cos(angles))\n    y = np.mean(np.sin(angles))\n    return np.arctan2(y, x)\n# Angular derivatives with proper wraparound\ndef angular_derivatives(angle_series):\n    '''Compute finite differences handling wraparound'''\n    diffs = np.diff(angle_series)\n    # Handle wraparound: [-π, π] → [-π, π]\n    diffs = (diffs + np.pi) % (2 * np.pi) - np.pi\n    return diffs</code></pre>\n</div>\n<div class='warning-box'>\n<h3>🏢 Real-World Applications</h3>\n<ul>\n<li><strong>Robotics:</strong> Averaging compass headings from multiple sensors</li>\n<li><strong>Computer Vision:</strong> Analyzing rotation sequences in video</li>\n<li><strong>Finance:</strong> Cyclical time series (daily, seasonal patterns)</li>\n<li><strong>Signal Processing:</strong> Phase analysis in frequency domain</li>\n</ul>\n</div>\n</div>",
  "17": "<div class='slide'>\n<div class='questions-slide'>\n<h1>Questions?</h1>\n<div class='contact-info'>\n<div class='demo-offer'>\n<h3>🔬 Want to See This in Action?</h3>\n<p>I've got interactive demos for:</p>\n<ul>\n<li>Live angle averaging visualization</li>\n<li>Color interpolation comparison</li>\n<li>Robot heading controller simulation</li>\n</ul>\n</div>\n<div class='resources'>\n<h3>📚 Resources</h3>\n<ul>\n<li><strong>Slides:</strong> Available on internal wiki</li>\n<li><strong>Code Examples:</strong> Python/JS implementations</li>\n<li><strong>Further Reading:</strong> 'Lie Groups for Computer Vision' by Ethan Eade</li>\n</ul>\n</div>\n</div>\n<div class='challenge'>\n<h3>🏆 Challenge for Next Week</h3>\n<div class='challenge-box'>\n<p>Find ONE wraparound bug in your current codebase</p>\n<p>Try the embedding approach</p>\n<p>Share your results!</p>\n</div>\n</div>\n<div class='final-thought'>\n<blockquote>\n'The best way to learn mathematics is to do mathematics.'\n<cite>— Paul Halmos</cite>\n</blockquote>\n<p>So go break some rings! 💍➡️📐</p>\n</div>\n<div class='thank-you'>\n<h2>Thank You!</h2>\n<div class='outro-visual'>\n<svg width='300' height='150' viewBox='0 0 300 150'>\n<!-- Circle with happy face -->\n<circle cx='150' cy='75' r='60' fill='none' stroke='#4CAF50' stroke-width='3'/>\n<!-- Happy eyes -->\n<circle cx='130' cy='60' r='5' fill='#4CAF50'/>\n<circle cx='170' cy='60' r='5' fill='#4CAF50'/>\n<!-- Happy smile -->\n<path d='M 120 90 Q 150 110 180 90' fill='none' stroke='#4CAF50' stroke-width='3'/>\n<!-- Surrounding points showing smooth embedding -->\n<g opacity='0.5'>\n<circle cx='90' cy='75' r='3' fill='#2196F3'/>\n<circle cx='210' cy='75' r='3' fill='#2196F3'/>\n<circle cx='150' cy='15' r='3' fill='#2196F3'/>\n<circle cx='150' cy='135' r='3' fill='#2196F3'/>\n<!-- Smooth curves connecting them -->\n<path d='M 90 75 Q 90 15, 150 15' fill='none' stroke='#2196F3' stroke-width='1' opacity='0.3'/>\n<path d='M 150 15 Q 210 15, 210 75' fill='none' stroke='#2196F3' stroke-width='1' opacity='0.3'/>\n<path d='M 210 75 Q 210 135, 150 135' fill='none' stroke='#2196F3' stroke-width='1' opacity='0.3'/>\n<path d='M 150 135 Q 90 135, 90 75' fill='none' stroke='#2196F3' stroke-width='1' opacity='0.3'/>\n</g>\n<text x='150' y='160' text-anchor='middle' font-size='12' fill='#666'>\nNo more wraparound headaches!\n</text>\n</svg>\n</div>\n</div>\n</div>\n</div>"
}